{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { UserContext } from \"../../UserContext\";\nimport { port } from \"../../port\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen() {\n  var _useContext = useContext(UserContext),\n    setUserType = _useContext.setUserType,\n    setLoggedin = _useContext.setLoggedin,\n    setUserID = _useContext.setUserID;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setemail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  function login(_x, _x2) {\n    return _login.apply(this, arguments);\n  }\n  function _login() {\n    _login = _asyncToGenerator(function* (email, password) {\n      email = email.replace(/\\s+/g, '').toLowerCase();\n      try {\n        var response = yield fetch(port + \"/login\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password\n          })\n        });\n        if (response.ok) {\n          var result = yield response.json();\n          setUserType(result.userType);\n          setUserID(result.userId);\n          setLoggedin(true);\n        } else {\n          var error = yield response.json();\n          alert(error.error);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n    return _login.apply(this, arguments);\n  }\n  return _jsxs(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: \"padding\",\n    children: [_jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        placeholder: \"email\",\n        value: email,\n        onChangeText: function onChangeText(text) {\n          return setemail(text);\n        },\n        style: styles.input\n      }), _jsx(TextInput, {\n        placeholder: \"Password\",\n        value: password,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        style: styles.input\n      })]\n    }), _jsx(View, {\n      style: styles.buttonContainer,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return login(email, password);\n        },\n        style: styles.button,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Login\"\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputContainer: {\n    width: '80%'\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 5\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 40\n  },\n  button: {\n    backgroundColor: '#0782f9',\n    width: '100%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  },\n  buttonOutineText: {\n    color: '#0782f9',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["useContext","useState","View","Text","StyleSheet","TouchableOpacity","KeyboardAvoidingView","TextInput","UserContext","port","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useContext","setUserType","setLoggedin","setUserID","_useState","_useState2","_slicedToArray","email","setemail","_useState3","_useState4","password","setPassword","login","_x","_x2","_login","apply","arguments","_asyncToGenerator","replace","toLowerCase","response","fetch","method","headers","body","JSON","stringify","ok","result","json","userType","userId","error","alert","err","console","style","styles","container","behavior","children","inputContainer","placeholder","value","onChangeText","text","input","buttonContainer","onPress","button","buttonText","create","flex","alignItems","justifyContent","width","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","marginTop","padding","color","fontWeight","fontSize","buttonOutineText"],"sources":["C:/Users/marlo/Desktop/Projects/Renters/screens/SignIn/Login.tsx"],"sourcesContent":["import { useContext, useState } from 'react';\r\nimport { View, Text, StyleSheet, Button, TouchableOpacity, KeyboardAvoidingView, TextInput } from 'react-native';\r\nimport { UserContext } from '../../UserContext';\r\nimport { port } from '../../port';\r\n\r\nexport default function LoginScreen() {\r\n  const { setUserType, setLoggedin, setUserID } = useContext(UserContext);\r\n\r\n  const [email, setemail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  async function login(email: string, password: string) {\r\n    // Remove spaces from email and convert to lowercase\r\n    email = email.replace(/\\s+/g, '').toLowerCase();\r\n  \r\n    try {\r\n      const response = await fetch(`${port}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n  \r\n      // Check if response is successful\r\n      if (response.ok) {\r\n        const result = await response.json();  \r\n        // Update user type in context\r\n        setUserType(result.userType);\r\n  \r\n        // Update user ID in context\r\n        setUserID(result.userId);\r\n  \r\n        // Update logged in status in context\r\n        setLoggedin(true);\r\n  \r\n      } else {\r\n        const error = await response.json();\r\n        alert(error.error); // Error message from the server\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  \r\n  \r\n  return (\r\n    <KeyboardAvoidingView \r\n      style={styles.container}\r\n      behavior=\"padding\"\r\n    >\r\n      <View style={styles.inputContainer}>\r\n        <TextInput \r\n          placeholder=\"email\" \r\n          value={email}\r\n          onChangeText={text => setemail(text)} \r\n          style={styles.input}\r\n        />\r\n        <TextInput \r\n          placeholder=\"Password\" \r\n          value={password}\r\n          onChangeText={text => setPassword(text)} \r\n          style={styles.input}\r\n          //secureTextEntry\r\n        />\r\n      </View>\r\n      <View style={styles.buttonContainer}>\r\n        <TouchableOpacity\r\n          onPress={() => login(email, password)}\r\n          style={styles.button}\r\n        >\r\n          <Text style={styles.buttonText}>Login</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </KeyboardAvoidingView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container:{\r\n    flex:1,\r\n    alignItems:'center',\r\n    justifyContent:'center',\r\n  },\r\n  inputContainer:{\r\n    width: '80%'\r\n  },\r\n  input:{\r\n    backgroundColor: 'white',\r\n    paddingHorizontal: 15,\r\n    paddingVertical: 10,\r\n    borderRadius: 10,\r\n    marginTop:5\r\n  },\r\n  buttonContainer:{\r\n    width: '60%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop:40\r\n  },\r\n  button:{\r\n    backgroundColor: '#0782f9',\r\n    width: '100%',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n  },\r\n  buttonText:{\r\n    color: 'white',\r\n    fontWeight: '700',\r\n    fontSize: 16\r\n  },\r\n  buttonOutineText:{\r\n    color: '#0782f9',\r\n    fontWeight: '700',\r\n    fontSize: 16\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}