{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { UserContext } from \"../UserContext\";\nimport Transaction from \"../props/transactionProp\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { port } from \"../port\";\nimport { fetchUser } from \"../functions/getUserName\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Transactions = function Transactions() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    transactions = _useState2[0],\n    setTransactions = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    searchQuery = _useState4[0],\n    setSearchQuery = _useState4[1];\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    usernames = _useState6[0],\n    setUsernames = _useState6[1];\n  var _useContext = useContext(UserContext),\n    userID = _useContext.userID,\n    userType = _useContext.userType;\n  useEffect(function () {\n    fetchTransactions(userID);\n  }, [userID]);\n  useEffect(function () {\n    fetchUsernames(transactions);\n  }, [transactions]);\n  function fetchTransactions(_x) {\n    return _fetchTransactions.apply(this, arguments);\n  }\n  function _fetchTransactions() {\n    _fetchTransactions = _asyncToGenerator(function* (userID) {\n      try {\n        var response = yield fetch(port + \"/transactions\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            userID: userID,\n            userType: userType\n          })\n        });\n        if (response.ok) {\n          var result = yield response.json();\n          setTransactions(result.transactions);\n        } else {\n          var error = yield response.json();\n          console.error(error.error);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n    return _fetchTransactions.apply(this, arguments);\n  }\n  function fetchUsernames(_x2) {\n    return _fetchUsernames.apply(this, arguments);\n  }\n  function _fetchUsernames() {\n    _fetchUsernames = _asyncToGenerator(function* (transactions) {\n      try {\n        var usernamesData = {};\n        for (var transaction of transactions) {\n          var user_id = transaction.user_id;\n          if (!usernames[user_id]) {\n            var fetchedUsername = yield fetchUser(user_id);\n            usernamesData[user_id] = fetchedUsername;\n          }\n        }\n        setUsernames(usernamesData);\n      } catch (error) {\n        console.error('Failed to fetch usernames:', error);\n      }\n    });\n    return _fetchUsernames.apply(this, arguments);\n  }\n  var handleSearch = function handleSearch(query) {\n    setSearchQuery(query);\n  };\n  var handleResetFilters = function handleResetFilters() {\n    setSearchQuery(\"\");\n  };\n  var filteredTransactions = transactions.filter(function (transaction) {\n    var transaction_id = transaction.transaction_id,\n      transaction_type = transaction.transaction_type,\n      transaction_amount = transaction.transaction_amount,\n      transaction_date = transaction.transaction_date,\n      user_id = transaction.user_id;\n    var lowerCaseQuery = searchQuery.toLowerCase();\n    var username = usernames[user_id] || \"\";\n    return transaction_id.toString().includes(lowerCaseQuery) || transaction_type.toLowerCase().includes(lowerCaseQuery) || transaction_amount.toString().includes(lowerCaseQuery) || transaction_date.toLowerCase().includes(lowerCaseQuery) || username.toLowerCase().includes(lowerCaseQuery);\n  });\n  return _jsxs(View, {\n    style: styles.transaction_container,\n    children: [_jsxs(View, {\n      style: styles.filter_container,\n      children: [_jsx(TextInput, {\n        style: styles.search_input,\n        placeholder: \"Search transactions...\",\n        value: searchQuery,\n        onChangeText: handleSearch\n      }), _jsx(TouchableOpacity, {\n        style: styles.reset_button,\n        onPress: handleResetFilters,\n        children: _jsx(Text, {\n          style: styles.reset_button_text,\n          children: \"Reset\"\n        })\n      })]\n    }), filteredTransactions.map(function (transaction) {\n      return _jsx(Transaction, {\n        type: transaction.transaction_type,\n        amount: transaction.transaction_amount,\n        user_id: transaction.user_id,\n        date: transaction.transaction_date,\n        id: transaction.transaction_id\n      }, transaction.transaction_id);\n    })]\n  });\n};\nexport default Transactions;\nvar styles = StyleSheet.create({\n  transaction_container: {\n    flex: 1,\n    alignItems: \"center\",\n    width: \"100%\"\n  },\n  filter_container: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginVertical: 16\n  },\n  filter_label: {\n    marginRight: 8\n  },\n  filter_item: {\n    paddingHorizontal: 8\n  },\n  search_input: {\n    flex: 1,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderWidth: 1,\n    borderColor: \"lightgrey\",\n    borderRadius: 8,\n    marginRight: 16\n  },\n  reset_button: {\n    backgroundColor: \"lightgrey\",\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n    marginBottom: 16\n  },\n  reset_button_text: {\n    color: \"black\",\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"names":["React","useContext","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","UserContext","Transaction","TextInput","port","fetchUser","jsx","_jsx","jsxs","_jsxs","Transactions","_useState","_useState2","_slicedToArray","transactions","setTransactions","_useState3","_useState4","searchQuery","setSearchQuery","_useState5","_useState6","usernames","setUsernames","_useContext","userID","userType","fetchTransactions","fetchUsernames","_x","_fetchTransactions","apply","arguments","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","ok","result","json","error","console","err","_x2","_fetchUsernames","usernamesData","transaction","user_id","fetchedUsername","handleSearch","query","handleResetFilters","filteredTransactions","filter","transaction_id","transaction_type","transaction_amount","transaction_date","lowerCaseQuery","toLowerCase","username","toString","includes","style","styles","transaction_container","children","filter_container","search_input","placeholder","value","onChangeText","reset_button","onPress","reset_button_text","map","type","amount","date","id","create","flex","alignItems","width","flexDirection","justifyContent","marginVertical","filter_label","marginRight","filter_item","paddingHorizontal","paddingVertical","borderWidth","borderColor","borderRadius","backgroundColor","marginBottom","color","fontWeight"],"sources":["C:/Users/marlo/Desktop/Projects/Renters/screens/Transaction.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { UserContext } from \"../UserContext\";\r\nimport Transaction from \"../props/transactionProp\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport { port } from \"../port\";\r\nimport { fetchUser } from \"../functions/getUserName\";\r\n\r\ntype TransactionData = {\r\n  transaction_id: string;\r\n  transaction_type: string;\r\n  transaction_amount: string;\r\n  transaction_date: string;\r\n  user_id: any;\r\n};\r\n\r\nconst Transactions = () => {\r\n  const [transactions, setTransactions] = useState<TransactionData[]>([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [usernames, setUsernames] = useState<{ [key: string]: string }>({});\r\n  const { userID, userType } = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    // Fetch user data on component mount\r\n    fetchTransactions(userID);\r\n  }, [userID]);\r\n\r\n  useEffect(() => {\r\n    // Fetch usernames on component mount\r\n    fetchUsernames(transactions);\r\n  }, [transactions]);\r\n\r\n  async function fetchTransactions(userID: string) {\r\n    try {\r\n      const response = await fetch(`${port}/transactions`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ userID, userType }),\r\n      });\r\n\r\n      // Check if response is successful\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setTransactions(result.transactions);\r\n      } else {\r\n        const error = await response.json();\r\n        console.error(error.error); // Error message from the server\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  async function fetchUsernames(transactions: TransactionData[]) {\r\n    try {\r\n      const usernamesData: { [key: string]: string } = {};\r\n\r\n      // Fetch usernames for all user IDs in transactions\r\n      for (const transaction of transactions) {\r\n        const { user_id } = transaction;\r\n\r\n        if (!usernames[user_id]) {\r\n          const fetchedUsername: any = await fetchUser(user_id);\r\n          usernamesData[user_id] = fetchedUsername;\r\n        }\r\n      }\r\n\r\n      setUsernames(usernamesData);\r\n    } catch (error) {\r\n      console.error('Failed to fetch usernames:', error);\r\n    }\r\n  }\r\n\r\n  const handleSearch = (query: string) => {\r\n    setSearchQuery(query);\r\n  };\r\n\r\n  const handleResetFilters = () => {\r\n    setSearchQuery(\"\");\r\n  }\r\n\r\n  const filteredTransactions = transactions.filter((transaction) => {\r\n    const { transaction_id, transaction_type, transaction_amount, transaction_date, user_id } = transaction;\r\n    const lowerCaseQuery = searchQuery.toLowerCase();\r\n    const username = usernames[user_id] || \"\"; // Get the username from the usernames state variable\r\n    return (\r\n      transaction_id.toString().includes(lowerCaseQuery) || // Convert transaction_id to string and check for inclusion\r\n      transaction_type.toLowerCase().includes(lowerCaseQuery) ||\r\n      transaction_amount.toString().includes(lowerCaseQuery) || // Convert transaction_amount to string and check for inclusion\r\n      transaction_date.toLowerCase().includes(lowerCaseQuery) ||\r\n      username.toLowerCase().includes(lowerCaseQuery) // Check for inclusion of username\r\n    );\r\n  });\r\n\r\n  return (\r\n    <View style={styles.transaction_container}>\r\n      <View style={styles.filter_container}>\r\n        <TextInput\r\n          style={styles.search_input}\r\n          placeholder=\"Search transactions...\"\r\n          value={searchQuery}\r\n          onChangeText={handleSearch}\r\n        />\r\n        <TouchableOpacity style={styles.reset_button} onPress={handleResetFilters}>\r\n          <Text style={styles.reset_button_text}>Reset</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      {filteredTransactions.map(transaction => (\r\n        <Transaction\r\n          key={transaction.transaction_id}\r\n          type={transaction.transaction_type}\r\n          amount={transaction.transaction_amount}\r\n          user_id={transaction.user_id}\r\n          date={transaction.transaction_date}\r\n          id={transaction.transaction_id}\r\n        />\r\n      ))}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default Transactions\r\n\r\nconst styles = StyleSheet.create({\r\n  transaction_container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  filter_container: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginVertical: 16,\r\n  },\r\n  filter_label: {\r\n    marginRight: 8,\r\n  },\r\n  filter_item: {\r\n    paddingHorizontal: 8,\r\n  },\r\n  search_input: {\r\n    flex: 1,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 4,\r\n    borderWidth: 1,\r\n    borderColor: \"lightgrey\",\r\n    borderRadius: 8,\r\n    marginRight: 16,\r\n},\r\n  reset_button: {\r\n    backgroundColor: \"lightgrey\",\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n    borderRadius: 8,\r\n    marginBottom: 16,\r\n    },\r\n    reset_button_text: {\r\n    color: \"black\",\r\n    fontWeight: \"bold\",\r\n    },\r\n    });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}